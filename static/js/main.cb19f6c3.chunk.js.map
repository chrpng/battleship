{"version":3,"sources":["Components/Cell.js","Components/Ship.js","Components/Board.js","GameLogic/ShipFactory.js","GameLogic/GameboardFactory.js","GameLogic/Player.js","App.js","serviceWorker.js","index.js"],"names":["Cell","val","coord","handleCellClick","row","col","gridColumnStart","cellStyle","gridRowStart","gridRowEnd","gridColumnEnd","cellClass","cellContents","className","onClick","data-row","data-col","style","Ship","length","isHorizontal","useDrag","item","type","collect","monitor","isDragging","drag","shipStyle","background","border","opacity","ref","Board","playerBoard","ships","useContext","Context","movePlayer1Board","canMovePlayer1Board","isStart","isPlayer1Turn","useDrop","accept","canDrop","offset","getDifferenceFromInitialOffset","calcDropLocation","toRow","toCol","drop","console","log","offsetCol","x","offsetRow","y","Math","round","map","ship","idx","key","getShipCoordsArr","rowIdx","colIdx","createShipCoords","coordsArr","i","push","createAdjacentCoords","adjacentArr","health","shipCoordsArr","shipAdjacentArr","getShipAdjacentArr","hit","isSunk","Gameboard","name","board","len","arr","j","createBoard","shipsObjectArr","quantity","getShip","find","some","shipCoords","filterInboundCoords","filter","coords","isInbounds","num","getOffsetCoords","placeNewShip","newShip","returnVal","canPlaceShip","deleteShipFromBoard","forEach","isHeadInbounds","isTailInbounds","adjacentCoords","offsetShipCords","offsetAdjacentCoords","isFreeSpace","every","inboundAdjacentCoords","isFreeNeighborSpace","clearShips","getBoardSize","moveShip","currShip","canMoveShip","addShipToBoard","getBoard","getShips","randomizeShips","shipsObject","randRow","randCol","randHoriz","successfulPlace","floor","random","receiveAttack","r","c","isValid","isHit","parseInt","shipHit","areAllShipsSunk","Player","playerName","isHuman","targets","gameboard","playerAttack","pcAttack","attackObj","target","pop","attack","createContext","player1","player2","App","useState","player1Board","setPlayer1Board","player2Board","setPlayer2Board","setShips","setIsPlayer1Turn","setIsStart","isGameOver","setIsGameOver","useEffect","computerTurn","playerTurn","slice","a","Promise","resolve","setTimeout","gameText","boards","e","dataset","Provider","value","DndProvider","backend","Backend","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cb19f6c3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Cell({ val, coord, handleCellClick }) {\n\n  const [row, col] = coord;\n  const gridRowStart = row + 1;\n  const gridColumnStart = col + 1;\n\n  const cellStyle = {\n    gridRowStart: `${gridRowStart}`,\n    gridRowEnd: 'span 1',\n    gridColumnStart: `${gridColumnStart}`,\n    gridColumnEnd: 'span 1',\n  }\n\n  const cellClass = val === 'H' ? 'cell-x hit' \n                  : val === 'M' ? 'cell-x'\n                  : '';\n\n  const cellContents = val === 'H' || val === 'M' ? 'X' : null;\n\n  return (\n    <li\n      className={`cell ${cellClass}`}\n      onClick={handleCellClick} \n      data-row={row} \n      data-col={col}\n      style={cellStyle}\n    >\n      {cellContents}\n    </li>\n  )\n}\n\nexport default Cell;","import React from 'react';\nimport { useDrag } from 'react-dnd';\n\nfunction Ship({ coord, length, isHorizontal }) {\n  const { row, col } = coord;\n  const [{ isDragging }, drag] = useDrag({\n    item: { \n      type: 'ship',\n      row: row,\n      col: col, \n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  })\n\n  const gridRowStart = row + 1;\n  const gridColumnStart = col + 1;\n\n  const shipStyle = {\n    background: '#39bdf1',\n    border: '2px solid #0000FF',\n    gridColumnStart: `${gridColumnStart}`,\n    gridRowStart: `${gridRowStart}`,\n    opacity: isDragging ? 0.2 : 0.6,\n  }\n  shipStyle['gridColumnEnd'] = isHorizontal ? `span ${length}` : 'span 1';\n  shipStyle['gridRowEnd'] = isHorizontal ? 'span 1' : `span ${length}`;\n  return (\n    <div\n      ref={drag}\n      className=\"ship\"\n      style={shipStyle}\n    >\n    </div>\n  )\n}\n\nexport default Ship;","import React, { useContext } from 'react';\nimport { useDrop } from 'react-dnd';\n\nimport { Context } from './../App';\n\nimport './Board.css';\n\nimport Cell from './Cell';\nimport Ship from './Ship';\n\nfunction Board({ playerBoard, handleCellClick, ships }) {\n  const { movePlayer1Board, canMovePlayer1Board, isStart, isPlayer1Turn } = useContext(Context);\n  const [, drop] = useDrop({\n    accept: 'ship',\n    canDrop: (item, monitor) => {\n      const offset = monitor.getDifferenceFromInitialOffset();\n      const { toRow, toCol } = calcDropLocation(item.row, item.col, offset);\n      return !isStart && canMovePlayer1Board(item.row, item.col, toRow, toCol);\n    },\n    drop: (item, monitor) => {\n      console.log(item);\n      const offset = monitor.getDifferenceFromInitialOffset();\n      const { toRow, toCol } = calcDropLocation(item.row, item.col, offset);\n      movePlayer1Board(item.row, item.col, toRow, toCol);\n      return undefined;\n    },\n  })\n\n  const calcDropLocation = (row, col, { x: offsetCol, y: offsetRow }) => {\n    const toRow = row + Math.round(offsetRow / 40);\n    const toCol = col + Math.round(offsetCol / 40);\n    return { toRow, toCol }\n  }\n\n  const renderCells = () => (\n    playerBoard ? playerBoard.map((row, rowIdx) => \n      row.map((col, colIdx) => \n        <Cell\n          key={`r${rowIdx}c${colIdx}`} \n          coord={[rowIdx, colIdx]}\n          handleCellClick={handleCellClick}\n          val={col}\n        />\n      )\n    ) : null\n  )\n\n  const renderShips = () => (\n    ships ? ships.map((ship, idx) => \n      <Ship\n        key={idx}\n        coord={ship.getShipCoordsArr()[0]}\n        length={ship.length}\n        isHorizontal={ship.isHorizontal}\n      />\n    ) : null\n  )\n\n  return (\n    <ul className={`board-grid ${!ships && isPlayer1Turn ? 'attackable' : ''}`} ref={drop}>\n      {renderShips()}\n      {renderCells()}\n    </ul>\n  )\n}\n\nexport default Board;","const createShipCoords = (row, col, length, isHorizontal) => {\n  const coordsArr = [];\n\n  for (let i = 0; i < length; i++) {\n    isHorizontal ? coordsArr.push({ row, col: col + i })\n                 : coordsArr.push({ row: row + i, col });\n  }\n  return coordsArr;\n}\n\nconst createAdjacentCoords = (row, col, length, isHorizontal) => {\n  const adjacentArr = [];\n\n  for (let i = -1; i < length + 1; i++) {\n    if(isHorizontal) {\n      if(i === -1 || i === length) adjacentArr.push({ row: row    , col: col + i })\n      adjacentArr.push({ row: row - 1, col: col + i })\n      adjacentArr.push({ row: row + 1, col: col + i })\n    } else {\n      if(i === -1 || i === length) adjacentArr.push({ row: row + i, col: col     })\n      adjacentArr.push({ row: row + i, col: col - 1 })\n      adjacentArr.push({ row: row + i, col: col + 1 })\n    }\n  }\n\n  return adjacentArr;\n}\n\nfunction Ship(row, col, length = 1, isHorizontal = true) {\n  let health = length;\n  const shipCoordsArr = createShipCoords(row, col, length, isHorizontal);\n  const shipAdjacentArr = createAdjacentCoords(row, col, length, isHorizontal);\n\n  const getShipCoordsArr = () => shipCoordsArr;\n  const getShipAdjacentArr = () => shipAdjacentArr;\n\n  const hit = () => {\n    health--;\n  };\n\n  const isSunk = () => {\n    //if at least one position of the ship is healthy, the ship is not sunk\n    return health <= 0;\n  }\n\n  return {\n    getShipCoordsArr,\n    getShipAdjacentArr,\n    get length() { return length },\n    get isHorizontal() { return isHorizontal },\n    hit,\n    isSunk\n  }\n}\n\nexport default Ship;","import Ship from \"./ShipFactory\"\n\nconst createBoard = (len) => {\n  const arr = [];\n  for (let i = 0; i < len; i++) {\n    arr.push([]);\n    for (let j = 0; j < len; j++) {\n      arr[i].push('');\n    }\n  }\n  return arr;\n}\n\nfunction Gameboard(name) {\n  const BOARD_SIZE = 10;\n  let board = createBoard(BOARD_SIZE);\n  let ships = [];\n\n  const shipsObjectArr = [\n    { quantity: 1, length: 4},\n    { quantity: 2, length: 3},\n    { quantity: 3, length: 2},\n    { quantity: 4, length: 1},\n  ]\n\n  const getBoardSize = () => BOARD_SIZE;\n  const getBoard = () => board;\n  const getShips = () => ships;\n\n  const getShip = (row, col) => {\n    return ships.find(ship => ship.getShipCoordsArr().some(shipCoords => shipCoords.row === row && shipCoords.col === col))\n  }\n\n  const filterInboundCoords = (coordsArr) => (\n    coordsArr.filter(coords => \n      isInbounds(coords.row) && isInbounds(coords.col)\n    )\n  )\n\n  const isInbounds = (num) => num >= 0 && num < BOARD_SIZE\n\n  const getOffsetCoords = (coords, offsetRow, offsetCol) => (\n    coords.map(coord => {\n      return {\n        row: coord.row + offsetRow, \n        col: coord.col + offsetCol \n      }\n    })\n  )\n\n  const placeNewShip = (row, col, length = 1, isHorizontal = true) => {\n    // Generate new ship based on input parameters\n    const newShip = Ship(row, col, length, isHorizontal);\n\n    const returnVal = canPlaceShip(newShip, row, col);\n    if(!returnVal) return false;\n\n    // Push ship to ship array\n    ships.push(newShip);\n\n    // Mark ship squares on board 2D array\n    for (let i = 0; i < length; i++) {\n      isHorizontal ? board[row][col + i] = 'S'\n                   : board[row + i][col] = 'S';\n    }\n    return true;\n  }\n\n  const moveShip = (ship, toCol, toRow) => {\n    // remove ship's old location from board\n    deleteShipFromBoard(ship);\n\n    // remove old ship from ship array\n    ships = ships.filter(currShip => currShip !== ship);\n\n    //generate new ship\n    placeNewShip(toCol, toRow, ship.length, ship.isHorizontal);\n  }\n\n  const deleteShipFromBoard = (ship) => {\n    ship.getShipCoordsArr().forEach(coord => {\n      board[coord.row][coord.col] = '';\n    })\n  }\n\n  const addShipToBoard = (ship) => {\n    ship.getShipCoordsArr().forEach(coord => {\n      board[coord.row][coord.col] = 'S';\n    })\n  }\n  \n  const canPlaceShip = (ship, row, col, offsetRow = 0, offsetCol = 0) => {\n    const toRow = row + offsetRow;\n    const toCol = col + offsetCol;\n    \n    // Make sure the head of the ship is inbounds\n    const isHeadInbounds =  isInbounds(toRow) && isInbounds(toCol);\n    // Make sure the tail of the ship is inbounds\n    const isTailInbounds = ship.isHorizontal \n                            ? toCol + ship.length <= 10\n                            : toRow + ship.length <= 10;\n    if(!isHeadInbounds || !isTailInbounds) return false;\n\n    // Get coordinates\n    const shipCoords = ship.getShipCoordsArr();\n    const adjacentCoords = ship.getShipAdjacentArr();\n\n    // Calculate adjacent coordinates at theoretical new position \n    const offsetShipCords = getOffsetCoords(shipCoords, offsetRow, offsetCol);\n    const offsetAdjacentCoords = getOffsetCoords(adjacentCoords, offsetRow, offsetCol);\n\n    // Check if every coord at new position is empty\n    const isFreeSpace = offsetShipCords.every(coord => board[coord.row][coord.col] === '')\n    // Filter away adjacent coords which are out-of-bounds then check if remaining coords are empty\n    const inboundAdjacentCoords = filterInboundCoords(offsetAdjacentCoords);\n    const isFreeNeighborSpace = inboundAdjacentCoords.every(coord => board[coord.row][coord.col] === '')\n\n    return isFreeSpace && isFreeNeighborSpace;\n  }\n\n  const canMoveShip = (ship, row, col, toRow, toCol) => {\n    // Remove ship from board temporarily so the ship doesn't see itself in the board check\n    deleteShipFromBoard(ship);\n\n    const offsetRow = toRow - row;\n    const offsetCol = toCol - col;\n\n    const returnVal = canPlaceShip(ship, row, col, offsetRow, offsetCol);\n    \n    // Re-add ship to board\n    addShipToBoard(ship);\n\n    return returnVal;\n  }\n\n  const randomizeShips = () => {\n    clearShips();\n\n    shipsObjectArr.forEach(shipsObject => {\n      for(let i = 0; i < shipsObject.quantity; i++) {\n        let randRow, randCol, randHoriz, successfulPlace;\n        do {\n          randRow = Math.floor(Math.random() * BOARD_SIZE);\n          randCol = Math.floor(Math.random() * BOARD_SIZE);\n          randHoriz = Math.random() > 0.5;\n          successfulPlace = placeNewShip(randRow, randCol, shipsObject.length, randHoriz)\n        }\n        // Look for a new location if the chosen coordinate was previously tried\n        while (!successfulPlace);\n      }\n    })\n  }\n\n  const clearShips = () => {\n    ships = [];\n    board = board.map(row => row.map(col => ''))\n  }\n\n  const receiveAttack = (r, c) => {\n    //returns object with two values: isValid and isHit\n    const row = parseInt(r);\n    const col = parseInt(c);\n\n    if(!isInbounds(row) || !isInbounds(col)) return { isValid: false, isHit: false }\n\n    let isValid, isHit;\n    switch (board[row][col]) {\n      case 'S':\n        // Record hit on board array\n        board[row][col] = 'H';\n\n        // Find ship located at hit location\n        const shipHit = getShip(row, col);\n\n        // let the hit ship process the hit\n        if(shipHit) shipHit.hit();\n\n        if(shipHit.isSunk()) {\n          const adjacentCoords = shipHit.getShipAdjacentArr();\n          const inboundAdjacentCoords = filterInboundCoords(adjacentCoords);\n\n          inboundAdjacentCoords.forEach(coord => {\n            board[coord.row][coord.col] = 'M'\n          })\n        }\n        \n        isValid = true;\n        isHit = true;\n        break;\n      case '':\n        // Record miss on board array\n        board[row][col] = 'M';\n        \n        isValid = true;\n        isHit = false;\n        break;\n      default:\n        console.log('cannot attack same location again')\n\n        isValid = false;\n        isHit = false;\n        break;\n    }\n    return { isValid, isHit }\n  }\n\n  const areAllShipsSunk = () => {\n    return ships.every(ship => ship.isSunk());\n  }\n\n  return {\n    get name() {\n      return name;\n    },\n    getBoardSize,\n    placeNewShip,\n    moveShip,\n    canMoveShip,\n    getBoard,\n    getShips,\n    getShip,\n    randomizeShips,\n    receiveAttack,\n    areAllShipsSunk,\n  }\n}\n\nexport default Gameboard;","import Gameboard from './GameboardFactory';\n\nfunction Player(playerName = 'Player 1', isHuman = false) {\n  let targets = [];\n  const name = isHuman ? playerName : 'CPU';\n  const gameboard = Gameboard(name);\n\n  const playerAttack = (gameboard, row, col) => {\n    return gameboard.receiveAttack(row, col);\n  }\n  \n  const pcAttack = (gameboard) => {\n    let attackObj;\n    let randRow, randCol;\n    do {\n      if(targets.length > 0) {\n        const target = targets.pop();\n        randRow = target.row;\n        randCol = target.col;\n      } else {\n        randRow = Math.floor(Math.random() * gameboard.getBoardSize());\n        randCol = Math.floor(Math.random() * gameboard.getBoardSize());\n      }\n  \n      attackObj = gameboard.receiveAttack(randRow, randCol);\n    }\n    // Look for a new location if the chosen coordinate was previously tried\n    while (attackObj.isValid === false);\n\n    if(attackObj.isHit) {\n      targets.push({ row: randRow - 1, col: randCol     })\n      targets.push({ row: randRow + 1, col: randCol     })\n      targets.push({ row: randRow    , col: randCol - 1 })\n      targets.push({ row: randRow    , col: randCol + 1 })\n    }\n  \n    return attackObj;\n  }\n\n  const attack = isHuman ? playerAttack : pcAttack;\n\n  return {\n    get gameboard() {\n      return gameboard;\n    },\n    get name() {\n      return name\n    },\n    attack,\n  }\n}\n\nexport default Player;","import React, { useState, useEffect, createContext } from 'react';\nimport './App.css';\nimport './reset.css'\nimport Board from './Components/Board';\n\nimport Player from './GameLogic/Player';\n\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\n\nexport const Context = createContext();\n\nlet player1 = Player('Juan', true);\nlet player2 = Player();\n\nfunction App() {\n  const [player1Board, setPlayer1Board] = useState([]);\n  const [player2Board, setPlayer2Board] = useState([]);\n  const [ships, setShips] = useState([]);\n  const [isPlayer1Turn, setIsPlayer1Turn] = useState(false);\n  const [isStart, setIsStart] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  //const [cpuBoard, setCPUBoard] = useState([]);\n  \n  const init = () => {\n    // player1 = Player('Juan', true);\n    // player1.gameboard.placeNewShip(1, 2, 3, true);\n    // player1.gameboard.placeNewShip(3, 2, 2, true);\n    // player1.gameboard.placeNewShip(5, 4, 2, false);\n    // player1.gameboard.placeNewShip(5, 7, 1, false);\n    player1.gameboard.randomizeShips();\n    setPlayer1Board(player1.gameboard.getBoard()); // do you need to generate new object to prevent state mutation?\n    setShips(player1.gameboard.getShips());\n\n    // player2 = Player();\n    // player2.gameboard.placeNewShip(4, 5, 1, false); //doesn't affect the player2.gameboard in function scope?\n    player2.gameboard.randomizeShips();\n    setPlayer2Board(player2.gameboard.getBoard());\n\n    setIsPlayer1Turn(true);\n  }\n\n  useEffect(() => {\n    init();\n  }, []);\n\n  useEffect(() => {\n    // Start Player 2's turn\n    computerTurn(player1.gameboard);\n  }, [isPlayer1Turn]);\n\n  const canMovePlayer1Board = (row, col, toRow, toCol) => {\n    const ship = player1.gameboard.getShip(row, col);\n    return player1.gameboard.canMoveShip(ship, row, col, toRow, toCol);\n  }\n\n  const movePlayer1Board = (row, col, toRow, toCol) => {\n    const ship = player1.gameboard.getShip(row, col);\n    player1.gameboard.moveShip(ship, toRow, toCol)\n\n    setShips(player1.gameboard.getShips());\n    setPlayer1Board(player1.gameboard.getBoard());\n  }\n\n  const randomizePlayer1Ships = () => {\n    if(!isStart) {\n      player1.gameboard.randomizeShips();\n      setPlayer1Board(player1.gameboard.getBoard());\n      setShips(player1.gameboard.getShips());\n    }\n  }\n\n  const handleCellClick = (e) => {\n    //Player 1 attacks Player 2's gameboard\n    playerTurn(player2.gameboard, e.target.dataset.row, e.target.dataset.col);\n  }\n\n  const playerTurn = (gameboard, row, col) => {\n    if(!isGameOver && isStart && isPlayer1Turn) {\n      let attackObj = player1.attack(gameboard, row, col);\n      if (!attackObj.isValid) return;\n\n      // Update DOM gameboard\n      setPlayer2Board(gameboard.getBoard().slice());\n\n      if(gameboard.areAllShipsSunk()) {\n        setIsGameOver(true);\n      } \n\n      if(!attackObj.isHit && !isGameOver) {\n        // Pass turn to Player 2\n        setIsPlayer1Turn(false);\n      }\n    }\n  }\n\n  const computerTurn = async (gameboard) => {\n    if(!isGameOver && isStart && !isPlayer1Turn) {\n      let attackObj;\n      do {\n        // Wait some time before letting the computer attack\n        attackObj = await new Promise(function(resolve) {\n          setTimeout(() => {\n            resolve(player2.attack(gameboard));\n          }, 500)\n        })\n\n        // Update DOM gameboard after awaiting the attack\n        setPlayer1Board(gameboard.getBoard().slice());\n\n        if(gameboard.areAllShipsSunk()) {\n          setIsGameOver(true);\n        }\n      } \n      while (!isGameOver && attackObj.isHit)\n\n      if(!isGameOver) {\n        // Pass turn to Player 1\n        setIsPlayer1Turn(true);\n      }\n    }\n  }\n\n  const restartGame = () => {\n    player1.gameboard.randomizeShips();\n    setPlayer1Board(player1.gameboard.getBoard());\n    setShips(player1.gameboard.getShips());\n\n    player2.gameboard.randomizeShips();\n    setPlayer2Board(player2.gameboard.getBoard());\n\n    setIsPlayer1Turn(true);\n    setIsStart(false);\n    setIsGameOver(false);\n  }\n\n  const gameText = (() => {\n    if(isGameOver) return isPlayer1Turn ? 'Player 1 Wins!' : 'Player 2 Wins!'\n    if(!isStart) return 'Set your board...'\n\n    return isPlayer1Turn ? 'Your Move' : 'Their Move'\n  })();\n  \n  const boards = !!player2Board ? (\n    <section className=\"boards-flex\">\n\n      <Board playerBoard={player1Board} ships={ships}></Board>\n      <div className=\"middle-console\">\n        {\n          isStart ? <button onClick={restartGame}>New Game</button>\n                  : <button className=\"start-btn\" onClick={() => setIsStart(true)}>Start</button>\n        }\n        <button className={isStart ? \"disabled\" : \"\"} onClick={randomizePlayer1Ships}>Randomize</button>\n        <div className=\"game-text\">{gameText}</div>\n      </div>\n      <Board playerBoard={player2Board} handleCellClick={handleCellClick}></Board>\n    </section>\n  ) : 'loading...'\n\n  return (\n    <Context.Provider \n      value={{\n        movePlayer1Board,\n        canMovePlayer1Board,\n        isStart,\n        isPlayer1Turn\n      }}\n    >\n      <DndProvider backend={Backend}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Battleship</h1>\n          </header>\n          <main>\n            {boards}\n          </main>\n        </div>\n      </DndProvider>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}